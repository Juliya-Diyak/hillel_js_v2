// для того  щоб запутити скрипт потрібно додати розширення Code Runner!
// як додати гіт до вс кода - https://code.visualstudio.com/docs/sourcecontrol/overview 

// коментарі, почнемо з них! Це однорядковий коментар

/*
   Це багаторядковий коментар.
   Він може розтягуватися на декілька рядків.
   Тут можна додавати більше пояснень.
 */

/*--- Змінна ---
- це іменована область пам'яті, ім'я якої можна використовувати для здійснення доступу до даних. 
Дані знаходяться у змінній.
Кожна змінна складається з двох основних частин: ім'я і значення. Ім'я виступає в ролі ідентифікатора, 
що дозволяє нам звертатися до збережених даних за допомогою зрозумілого та організованого позначення, 
що полегшує роботу з даними. 
Значенням змінної є фактичні дані різних типів, які зберігаються в ній.*/

// console.log('Hello Odesa')

// var message; //Об'ява змінної "age"
// message = 'Hello world'; //Ініціалізація змінної значенням "Hello world"
// console.log(message) // Вивід зміної в консоль

// Значення змінної можна змінити
// var message = "Hillel QA pro";
// console.log(message);
// message = "JavaScript";
// console.log(message);


/**
 У імені змінної є декілька обмежень:
 - цифри на початку, але цифри можуть бути використані у будь-якій іншій частині імені
 - Заборонено використовувати символи, такі як дефіс, пробіл тощо, окрім символів $ та _
 - пробіли в назві
 - зарезервовані слова - this, return і так далі
 */

// var 1login='Вася';
// var log-in='Вася';
//var % = '%'; // Оголошено змінну з ім'ям "%"
//var - = '--'; // Тепер змінна з ім'ям "-"
// var return='повернення'; // зарезервоване слово!

// А ось так вже можна.
// var login='vasja';
// var log_in='vasja';
// var login123='vasja';
// var $='дивна зміна';
// var _='А чому ні?';
// var імя='можливо навіть так, але це погана практика і використовуємо тільки англійську мову';
// console.log(імя);

/* Для створення імені змінної більше ніж одне слово використовувайте camelCase
Це означає, що перше слово починається з малої літери, а кожне наступне слово починається з великої літери: */
// Погано
//let first_name = "John";

// Добре
//let firstName = "John";

// Регістр має значення !
// var login;
// Login='Вася'; // Помилка, Login та login різні змінні.


/**
 Декілька важливих правил при виборі імені змінної:

 - Імена змінних повинні бути описовими: Вибирайте імена, які відображають призначення змінної. 
 Читаючи ім'я змінної, інші розробники повинні зрозуміти, що саме вона зберігає.
 */

 // Погано
//let x = 10;

// Добре
//let age = 30;


 /**
 - Використовуйте зрозумілі слова: Використовуйте розумілі та логічні слова в іменах змінних. 
 Наприклад, userName для зберігання імені користувача.
 - Уникайте скорочень: Уникайте скорочень та абревіатур, які можуть бути неочевидними для інших. 
 */

// Погано
//let numItems = 10;

// Добре
//let numberOfItems = 30;

/*
Використовуйте англійську мову: Якщо можливо, назви змінних повинні бути на англійській мові, 
оскільки це стандарт для програмування на цій мові. Це полегшує спілкування та розуміння для всіх розробників.
*/
// Погано
//let переменная = "Значення";

// Добре
//let variable = "Value";


/*-----Оголошення та ініціалізація змінних----
 Оголошення змінних - це створення ідентифікатора для змінної. 
Під час оголошення ви вказуєте ім'я змінної, яке використовуватиметься для посилання на неї в вашому коді. 
В JavaScript ви можете оголошувати змінні за допомогою ключових слів var, let або const. 
*/
//var x;
//var name;


/* Ініціалізація змінних - це присвоєння значення оголошеній змінній. 
Після того як ви оголосили змінну, ви можете встановити її значення. 
Це робиться за допомогою оператора присвоєння (=). 
*/
// Оголошення та ініціалізація змінних
//var x;
//x = 10;

//let name;
//name = "John";


// Оголошення та ініціалізація одночасно
//var y = 20;
//let message = "Hello, World!";
//const gravity = 9.81;

/**
 ----Константи---
- це змінні, значення яких не може бути змінено після їхньої ініціалізації.
 Іншими словами, коли ви визначаєте константу, ви призначаєте їй значення один раз,
 і після цього ви не можете змінити це значення протягом виконання програми.
 */

// Технічно константи це просто змінні, які ми домовляємося не змінювати, поки що!
// var COLOR_RED = '#ff0000';
// var COLOR_SILVER = '#c0c0c0';
// var elementColor = COLOR_RED;
// console.log(elementColor);

// const constVariable = 3.14;
// console.log(constVariable);
// constVariable = 5;

/**
 let vs var
 */

 //Reason 1
//  let variable = 5;
// {
//   let variable1 = 5;

// }
// console.log(variable1); //variable1 cannot be used here

// let variable = 5;
// {
//   var variable1 = 5;
// }
// console.log(variable1); //variable1 can be used here

//Reason 2
// let b =1;
// let b =2;

// var a = 1;
// var a = 2; 

//Reason 3
// коли будемо функціїмо проходити


/**
 підняття" або "вспливання" (hoisting) змінних та функцій у JavaScript.
 Це важлива концепція, яка впливає на те, як інтерпретатор JavaScript обробляє оголошення змінних та функцій під час 
 виконання коду.

 Hoisting - це механізм, за допомогою якого JavaScript "піднімає" (hoists) оголошення змінних та функцій на верхній рівень свого контексту. 
 Це означає, що ви можете використовувати змінну або функцію перед тим, як вони будуть оголошені в коді. 
 Однак вони будуть містити undefined,  поки їм не буде присвоєне значення.

 */

// console.log(x); 
// var x = 10;

// var x = 10;
// console.log(x);

/*Temporal Dead Zone - це період між "підняттям" (hoisting) змінної та її ініціалізацією, коли змінна існує, 
але не має значення. 
Спроби отримати доступ до такої змінної призводять до помилки.
*/

// console.log(y); 
// let y = 20;
// console.log(y); 

/**
 ----Типи даних----
В мові JavaScript існують вісім основних типів даних, які можна розділити на дві категорії: примітивні типи та об'єкти.

 - Number (Число): Відповідає числовим значенням, включаючи цілі числа та числа з плаваючою комою.
 - String (Рядок): Відповідає послідовностям символів (текстові дані), які можна представити у лапках (одинарних або подвійних).
 - Boolean (Булевий): Відповідає двом можливим значенням: true (істина) або false (хиба). Використовується для логічних операцій.
 - Object (Об'єкт): Відповідає складним даним, які можуть містити властивості та методи.
 
 Об'єкти є основними елементами ООП (об'єктно-орієнтованого програмування).
 - Null (Порожність): Вказує на відсутність значення або відсутність посилання на об'єкт.
 - Undefined (Не визначено): Відповідає змінним, які не були ініціалізовані та не мають значення.
 - Symbol (Символ): Введений у ECMAScript 6, символи представляють унікальні ідентифікатори та використовуються,
 зокрема, для властивостей об'єктів.
 - BigInt (Велике ціле число): Введений у ECMAScript 11, цей тип даних дозволяє працювати з цілими числами,
 які перевищують максимальні обмеження типу Number.

 Примітивні дані містять конкретні значення, тоді як об'єкти містять посилання на місце в пам'яті, 
 де знаходяться відповідні дані. 
 Докладніше це буде розглянуто пізніше.

 */
// ---String---
// var str = "Ми вже так 100 разів робили";
// console.log(str);
// var str2 = 'QA pro'; // Зверніть увагу, лапки одинарні, і це цілком собі законно та не має ніякої різниці між ""
// console.log(str2);

//Об'єднання рядків (конкатенація):
// let firstName = "John";
// let lastName = "Doe";
// let fullName = firstName + " " + lastName;
// console.log(fullName); 

//Доступ до символів в рядку:
// let str = "JavaScript";
// let firstLetter = str[0]; 
// console.log(firstLetter); 

/*Методи рядка: JavaScript надає багато методів для роботи з рядками, наприклад, 
метод length для визначення довжини рядка або метод toUpperCase() для перетворення рядка у верхній регістр:
*/
// let text = "Це приклад рядка";
// let length = text.length; // Довжина рядка
// console.log(length); // Результат: 17

// let uppercaseText = text.toUpperCase(); // Перетворення в верхній регістр
// console.log(uppercaseText); // Результат: "ЦЕ ПРИКЛАД РЯДКА"

/*Шаблонні рядки: В сучасних версіях JavaScript можна використовувати шаблонні рядки 
для підстави змінних у рядок без конкатенації:
*/
// let name = "Анна";
// let message = `Привіт, ${name}!`;
// console.log(message); // Результат: "Привіт, Анна!"


// ---Number---
// var n = 12; //Це number
// var float = 12.345; //І це також Number
// var number = 0x2a; // шістнадцятирічна система
// console.log(n);
// console.log(float);
// console.log(number)


//Математичні операції: JavaScript дозволяє виконувати математичні операції з числами
// let x = 10;
// let y = 5;
// let sum = x + y; // Додавання
// let difference = x - y; // Віднімання
// let product = x * y; // Множення
// let quotient = x / y; // Ділення


/*Інкремент та декремент: Можна збільшувати або зменшувати значення числа на 1 за допомогою операторів інкремента (++) 
та декремента (--)
*/

// let count = 5;
// count++;  
// console.log(count); 

// let total = 10;
// total--;
// console.log(total); 

// Об'єднання з рядками: Числа можна об'єднувати з рядками, якщо їх потрібно вивести разом:

// let quantity = 3;
// console.log("Залишилось " + quantity + " одиниць товару.");

// ---Infinity---
/*var infinity = 10/0;
console.log(infinity) // Infinity
var negativeInfinity = -10/0;
console.log(negativeInfinity) // -Infinity*/

//---Nan. Значення Nan не дорівнює нічому, включаючи себе. Будь які операції з Nan повертають Nan
// var nan = 0/0;
// console.log(nan)
// var nan2 = "qwerty" * 25;
// console.log(nan2)//*/




// --- Boolean. Цей тип даних має тільки два значення true/ false
// var bool = true;
// console.log(bool);
//let isLogged = true; // Користувач увійшов в систему
//let hasPermission = false; // 

/* --- Undefined----
вказує на те, що змінна або об'єкт був оголошений, але не має значення. 
Зазвичай це сталося через те, що змінній не було присвоєно жодного значення або об'єкт був оголошений, 
але він залишився порожнім.
*/
// var text; // За замовчуванням якщо змінна не ініціалізована, її значення Undefined
// console.log(text)

/*---Null---  вказує на відсутність значення або представляє ситуацію, коли програмно задано, 
що змінна чи властивість мають "нульове" значення. Це відрізняється від "undefined", 
де значення відсутнє через неоголошену змінну.*/

// var empty = null;
// console.log(empty)
//Позначає !!!навмисну!!! відсутність значення.


/* ---Symbol. Новий тип, створений для унікальних ідентифікаторів в обєктах. 
Символи з однаковим імям не дорівнюють один одному.*/

// var symbol = Symbol("Alex");
// var symbol2 = Symbol("Alex");


/*---BigInt. Цей тип даних надає змогу створювати цілі числа більш ніж 2 в 53,
і дозволяє представляти цілі числа довільної довжини, 
які перевищують максимальну точність, яку може представити тип даних "Number".*/

// var bigInt = BigInt(8888999999881124);
// var bigInt2 = 8888999999881124n;
// console.log(typeof bigInt2);

/* --- Object.  використовується для створення складних структур даних, які містять набір властивостей (ключ-значення). 
Про цей тип даних буде ми поговоримо на наступних уроках. */

// var user = {
//     name : "Alex",
//     email: "qapro@gmail.com",
//     cat: {age:5}
// }

/* --- Array  використовується для створення упорядкованих списків елементів
Про цей тип даних буде ми поговоримо на наступних уроках. */

// const colors = ["red", "green", "blue"];
// const numbers = [1, 2, 3, 4, 5];


/* --- Function  представляють собою блоки коду, 
які містять певну логіку та можуть бути використані для виконання однакових операцій без необхідності повторення коду. */

// function isAdult(age) {
//   if (age >= 18) {
//     return true;
//   } else {
//     return false;
//   }
// }

// let result = isAdult(25); 

//--------------------------------------------------------------------------------------
//Динамічна типізація - за межею добра і зла.
//одна й та змінна може бути будь-ким

// var guessWho = 3.14;
// guessWho = 'А тепер тут строка';
// guessWho = false;

// А як нам дізнатися якого типу яка змінна ? На допомогу приходить Nan

// console.log(typeof "Hello");
// console.log(typeof 41);
// console.log(typeof false);
// console.log(typeof undefined);
// console.log(typeof Symbol());
// console.log(typeof {}); // Хто пропустив, це обьєкт, але без значень
// console.log(typeof []); // А ось тут цікаво, це масив який ми ще не вчили але він також типу object
// console.log(typeof BigInt(1));
// console.log(typeof console.log); // Функція!!! Хоча функції це також обєкти, але для зручності зробили вивід function
// console.log(typeof null); // Це офіційна помилка самої мови програмування.


//------------------------------------------------------------------------------------------------
/* --- Перевірка типів та використання typeof ---
Для перевірки типів даних та отримання інформації про тип об'єкта, 
використовується оператор typeof. 
Оператор typeof повертає рядкове значення, яке вказує на тип даних об'єкта.
*/

// typeof "Hello"; // "string"
// typeof 42; // "number"
// typeof true; // "boolean"

// typeof [1, 2, 3]; // "object"
// typeof { name: "John", age: 30 }; // "object"

// let variable;
// typeof variable; // "undefined"

// let emptyValue = null;
// typeof emptyValue; // "object"

// typeof NaN; // "number"

//--------------------------------------------------------------------------------------------------
/**
 Перетворення типів (примітиви)

 - Перетворення до рядка
 - Перетворення до числа
 - Перетворення до логічного значення

 В JavaScript існують два типи перетворень даних: явні (які ви явно вказуєте у коді)
 та неявні (які відбуваються автоматично за певних обставин).
 */


// --- Явне перетворення типів ---

// Number(): Ця функція використовується для перетворення значень в числовий тип. Наприклад:

// const str = "42";
// console.log(typeof str)
// const num = Number(str);
// console.log(num); // Результат: 42 (тип: number)
// console.log(typeof num)



//Перетворення до числа
// let number = Number('4');
// console.log(number, typeof number);

// let text = + "4";
// console.log(text, typeof text);

/*let number = Number(undefined);
console.log(number, typeof number);*/

/*let number = Number(null);
console.log(number, typeof number);*/

// let number = Number(true);
// console.log(number, typeof number);

// let number = Number('qwerty');
// console.log(number, typeof number);



//String(): Ця функція перетворює значення в рядковий тип даних. Наприклад:

// const num = 42;
// console.log(typeof num)
// const str = String(num);
// console.log(str); // Результат: "42" (тип: string)
// console.log(typeof str)




// let text = String(3);
// console.log(text);
// console.log(typeof text);


// let text = String(undefined);
// console.log(text);
// console.log(typeof text);

// let text = String(null);
// console.log(text);
// console.log(typeof text);

// let text = String(false);
// console.log(text);
// console.log(typeof text);




//Boolean(): Вона дозволяє перетворити значення в логічний тип (true або false). Наприклад:

// const num = 42;
// console.log(typeof num)
// const bool = Boolean(num);
// console.log(bool); // Результат: true (тип: boolean)
// console.log(typeof bool)



// Перетворення до логічного значення
// let bool = Boolean('2');
// console.log(bool, typeof  bool);

// let bool = Boolean(undefined);
// console.log(bool, typeof  bool);

// let bool = Boolean(null);
// console.log(bool, typeof  bool);

// let bool = Boolean('');
// console.log(bool, typeof  bool);

// let bool = Boolean(-9);
// console.log(bool, typeof  bool);



// --- Неявне перетворення ---

// Число + Рядок:

// const num = 42;
// const str = "2";
// const result = num + str; // Результат: "422" (тип: string)
// console.log(typeof result)

// Рядок + Булеве значення:

// const str = "true";
// const bool = true;
// const result = str + bool; // Результат: "truetrue" (тип: string)
// console.log(typeof result)


//--------------------------------------------------------------------------------------------------

